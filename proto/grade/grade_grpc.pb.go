// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: proto/grade/grade.proto

package grade

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GradingService_SetBlockingCriteriaMark_FullMethodName = "/grade.GradingService/SetBlockingCriteriaMark"
	GradingService_SetMainCriteriaMark_FullMethodName     = "/grade.GradingService/SetMainCriteriaMark"
)

// GradingServiceClient is the client API for GradingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GradingServiceClient interface {
	SetBlockingCriteriaMark(ctx context.Context, in *SetBlockingCriteriaMarkRequest, opts ...grpc.CallOption) (*SetBlockingCriteriaMarkResponse, error)
	SetMainCriteriaMark(ctx context.Context, in *SetMainCriteriaMarkRequest, opts ...grpc.CallOption) (*SetMainCriteriaMarkResponse, error)
}

type gradingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGradingServiceClient(cc grpc.ClientConnInterface) GradingServiceClient {
	return &gradingServiceClient{cc}
}

func (c *gradingServiceClient) SetBlockingCriteriaMark(ctx context.Context, in *SetBlockingCriteriaMarkRequest, opts ...grpc.CallOption) (*SetBlockingCriteriaMarkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetBlockingCriteriaMarkResponse)
	err := c.cc.Invoke(ctx, GradingService_SetBlockingCriteriaMark_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gradingServiceClient) SetMainCriteriaMark(ctx context.Context, in *SetMainCriteriaMarkRequest, opts ...grpc.CallOption) (*SetMainCriteriaMarkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetMainCriteriaMarkResponse)
	err := c.cc.Invoke(ctx, GradingService_SetMainCriteriaMark_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GradingServiceServer is the server API for GradingService service.
// All implementations must embed UnimplementedGradingServiceServer
// for forward compatibility.
type GradingServiceServer interface {
	SetBlockingCriteriaMark(context.Context, *SetBlockingCriteriaMarkRequest) (*SetBlockingCriteriaMarkResponse, error)
	SetMainCriteriaMark(context.Context, *SetMainCriteriaMarkRequest) (*SetMainCriteriaMarkResponse, error)
	mustEmbedUnimplementedGradingServiceServer()
}

// UnimplementedGradingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGradingServiceServer struct{}

func (UnimplementedGradingServiceServer) SetBlockingCriteriaMark(context.Context, *SetBlockingCriteriaMarkRequest) (*SetBlockingCriteriaMarkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBlockingCriteriaMark not implemented")
}
func (UnimplementedGradingServiceServer) SetMainCriteriaMark(context.Context, *SetMainCriteriaMarkRequest) (*SetMainCriteriaMarkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMainCriteriaMark not implemented")
}
func (UnimplementedGradingServiceServer) mustEmbedUnimplementedGradingServiceServer() {}
func (UnimplementedGradingServiceServer) testEmbeddedByValue()                        {}

// UnsafeGradingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GradingServiceServer will
// result in compilation errors.
type UnsafeGradingServiceServer interface {
	mustEmbedUnimplementedGradingServiceServer()
}

func RegisterGradingServiceServer(s grpc.ServiceRegistrar, srv GradingServiceServer) {
	// If the following call pancis, it indicates UnimplementedGradingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GradingService_ServiceDesc, srv)
}

func _GradingService_SetBlockingCriteriaMark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBlockingCriteriaMarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GradingServiceServer).SetBlockingCriteriaMark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GradingService_SetBlockingCriteriaMark_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GradingServiceServer).SetBlockingCriteriaMark(ctx, req.(*SetBlockingCriteriaMarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GradingService_SetMainCriteriaMark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMainCriteriaMarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GradingServiceServer).SetMainCriteriaMark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GradingService_SetMainCriteriaMark_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GradingServiceServer).SetMainCriteriaMark(ctx, req.(*SetMainCriteriaMarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GradingService_ServiceDesc is the grpc.ServiceDesc for GradingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GradingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grade.GradingService",
	HandlerType: (*GradingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetBlockingCriteriaMark",
			Handler:    _GradingService_SetBlockingCriteriaMark_Handler,
		},
		{
			MethodName: "SetMainCriteriaMark",
			Handler:    _GradingService_SetMainCriteriaMark_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/grade/grade.proto",
}
