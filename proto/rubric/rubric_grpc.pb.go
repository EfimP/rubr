// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: proto/rubric/rubric.proto

package rubric

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RubricService_CreateNewBlockingCriteria_FullMethodName = "/rubric.RubricService/CreateNewBlockingCriteria"
	RubricService_CreateNewCriteriaGroup_FullMethodName    = "/rubric.RubricService/CreateNewCriteriaGroup"
	RubricService_CreateNewMainCriteria_FullMethodName     = "/rubric.RubricService/CreateNewMainCriteria"
	RubricService_CreateCriteriaDescription_FullMethodName = "/rubric.RubricService/CreateCriteriaDescription"
	RubricService_SetCriteriaWeight_FullMethodName         = "/rubric.RubricService/SetCriteriaWeight"
	RubricService_LoadTaskBlockingCriterias_FullMethodName = "/rubric.RubricService/LoadTaskBlockingCriterias"
	RubricService_LoadTaskMainCriterias_FullMethodName     = "/rubric.RubricService/LoadTaskMainCriterias"
)

// RubricServiceClient is the client API for RubricService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RubricServiceClient interface {
	CreateNewBlockingCriteria(ctx context.Context, in *CreateNewBlockingCriteriaRequest, opts ...grpc.CallOption) (*CreateNewBlockingCriteriaResponse, error)
	CreateNewCriteriaGroup(ctx context.Context, in *CreateNewCriteriaGroupRequest, opts ...grpc.CallOption) (*CreateNewCriteriaGroupResponse, error)
	CreateNewMainCriteria(ctx context.Context, in *CreateNewMainCriteriaRequest, opts ...grpc.CallOption) (*CreateNewMainCriteriaResponse, error)
	CreateCriteriaDescription(ctx context.Context, in *CreateCriteriaDescriptionRequest, opts ...grpc.CallOption) (*CreateCriteriaDescriptionResponse, error)
	SetCriteriaWeight(ctx context.Context, in *SetCriteriaWeightRequest, opts ...grpc.CallOption) (*SetCriteriaWeightResponse, error)
	LoadTaskBlockingCriterias(ctx context.Context, in *LoadTaskBlockingCriteriasRequest, opts ...grpc.CallOption) (*LoadTaskBlockingCriteriasResponse, error)
	LoadTaskMainCriterias(ctx context.Context, in *LoadTaskMainCriteriasRequest, opts ...grpc.CallOption) (*LoadTaskMainCriteriasResponse, error)
}

type rubricServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRubricServiceClient(cc grpc.ClientConnInterface) RubricServiceClient {
	return &rubricServiceClient{cc}
}

func (c *rubricServiceClient) CreateNewBlockingCriteria(ctx context.Context, in *CreateNewBlockingCriteriaRequest, opts ...grpc.CallOption) (*CreateNewBlockingCriteriaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateNewBlockingCriteriaResponse)
	err := c.cc.Invoke(ctx, RubricService_CreateNewBlockingCriteria_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rubricServiceClient) CreateNewCriteriaGroup(ctx context.Context, in *CreateNewCriteriaGroupRequest, opts ...grpc.CallOption) (*CreateNewCriteriaGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateNewCriteriaGroupResponse)
	err := c.cc.Invoke(ctx, RubricService_CreateNewCriteriaGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rubricServiceClient) CreateNewMainCriteria(ctx context.Context, in *CreateNewMainCriteriaRequest, opts ...grpc.CallOption) (*CreateNewMainCriteriaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateNewMainCriteriaResponse)
	err := c.cc.Invoke(ctx, RubricService_CreateNewMainCriteria_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rubricServiceClient) CreateCriteriaDescription(ctx context.Context, in *CreateCriteriaDescriptionRequest, opts ...grpc.CallOption) (*CreateCriteriaDescriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCriteriaDescriptionResponse)
	err := c.cc.Invoke(ctx, RubricService_CreateCriteriaDescription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rubricServiceClient) SetCriteriaWeight(ctx context.Context, in *SetCriteriaWeightRequest, opts ...grpc.CallOption) (*SetCriteriaWeightResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetCriteriaWeightResponse)
	err := c.cc.Invoke(ctx, RubricService_SetCriteriaWeight_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rubricServiceClient) LoadTaskBlockingCriterias(ctx context.Context, in *LoadTaskBlockingCriteriasRequest, opts ...grpc.CallOption) (*LoadTaskBlockingCriteriasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoadTaskBlockingCriteriasResponse)
	err := c.cc.Invoke(ctx, RubricService_LoadTaskBlockingCriterias_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rubricServiceClient) LoadTaskMainCriterias(ctx context.Context, in *LoadTaskMainCriteriasRequest, opts ...grpc.CallOption) (*LoadTaskMainCriteriasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoadTaskMainCriteriasResponse)
	err := c.cc.Invoke(ctx, RubricService_LoadTaskMainCriterias_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RubricServiceServer is the server API for RubricService service.
// All implementations must embed UnimplementedRubricServiceServer
// for forward compatibility.
type RubricServiceServer interface {
	CreateNewBlockingCriteria(context.Context, *CreateNewBlockingCriteriaRequest) (*CreateNewBlockingCriteriaResponse, error)
	CreateNewCriteriaGroup(context.Context, *CreateNewCriteriaGroupRequest) (*CreateNewCriteriaGroupResponse, error)
	CreateNewMainCriteria(context.Context, *CreateNewMainCriteriaRequest) (*CreateNewMainCriteriaResponse, error)
	CreateCriteriaDescription(context.Context, *CreateCriteriaDescriptionRequest) (*CreateCriteriaDescriptionResponse, error)
	SetCriteriaWeight(context.Context, *SetCriteriaWeightRequest) (*SetCriteriaWeightResponse, error)
	LoadTaskBlockingCriterias(context.Context, *LoadTaskBlockingCriteriasRequest) (*LoadTaskBlockingCriteriasResponse, error)
	LoadTaskMainCriterias(context.Context, *LoadTaskMainCriteriasRequest) (*LoadTaskMainCriteriasResponse, error)
	mustEmbedUnimplementedRubricServiceServer()
}

// UnimplementedRubricServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRubricServiceServer struct{}

func (UnimplementedRubricServiceServer) CreateNewBlockingCriteria(context.Context, *CreateNewBlockingCriteriaRequest) (*CreateNewBlockingCriteriaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewBlockingCriteria not implemented")
}
func (UnimplementedRubricServiceServer) CreateNewCriteriaGroup(context.Context, *CreateNewCriteriaGroupRequest) (*CreateNewCriteriaGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewCriteriaGroup not implemented")
}
func (UnimplementedRubricServiceServer) CreateNewMainCriteria(context.Context, *CreateNewMainCriteriaRequest) (*CreateNewMainCriteriaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewMainCriteria not implemented")
}
func (UnimplementedRubricServiceServer) CreateCriteriaDescription(context.Context, *CreateCriteriaDescriptionRequest) (*CreateCriteriaDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCriteriaDescription not implemented")
}
func (UnimplementedRubricServiceServer) SetCriteriaWeight(context.Context, *SetCriteriaWeightRequest) (*SetCriteriaWeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCriteriaWeight not implemented")
}
func (UnimplementedRubricServiceServer) LoadTaskBlockingCriterias(context.Context, *LoadTaskBlockingCriteriasRequest) (*LoadTaskBlockingCriteriasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadTaskBlockingCriterias not implemented")
}
func (UnimplementedRubricServiceServer) LoadTaskMainCriterias(context.Context, *LoadTaskMainCriteriasRequest) (*LoadTaskMainCriteriasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadTaskMainCriterias not implemented")
}
func (UnimplementedRubricServiceServer) mustEmbedUnimplementedRubricServiceServer() {}
func (UnimplementedRubricServiceServer) testEmbeddedByValue()                       {}

// UnsafeRubricServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RubricServiceServer will
// result in compilation errors.
type UnsafeRubricServiceServer interface {
	mustEmbedUnimplementedRubricServiceServer()
}

func RegisterRubricServiceServer(s grpc.ServiceRegistrar, srv RubricServiceServer) {
	// If the following call pancis, it indicates UnimplementedRubricServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RubricService_ServiceDesc, srv)
}

func _RubricService_CreateNewBlockingCriteria_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNewBlockingCriteriaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RubricServiceServer).CreateNewBlockingCriteria(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RubricService_CreateNewBlockingCriteria_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RubricServiceServer).CreateNewBlockingCriteria(ctx, req.(*CreateNewBlockingCriteriaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RubricService_CreateNewCriteriaGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNewCriteriaGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RubricServiceServer).CreateNewCriteriaGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RubricService_CreateNewCriteriaGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RubricServiceServer).CreateNewCriteriaGroup(ctx, req.(*CreateNewCriteriaGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RubricService_CreateNewMainCriteria_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNewMainCriteriaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RubricServiceServer).CreateNewMainCriteria(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RubricService_CreateNewMainCriteria_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RubricServiceServer).CreateNewMainCriteria(ctx, req.(*CreateNewMainCriteriaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RubricService_CreateCriteriaDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCriteriaDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RubricServiceServer).CreateCriteriaDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RubricService_CreateCriteriaDescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RubricServiceServer).CreateCriteriaDescription(ctx, req.(*CreateCriteriaDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RubricService_SetCriteriaWeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCriteriaWeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RubricServiceServer).SetCriteriaWeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RubricService_SetCriteriaWeight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RubricServiceServer).SetCriteriaWeight(ctx, req.(*SetCriteriaWeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RubricService_LoadTaskBlockingCriterias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadTaskBlockingCriteriasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RubricServiceServer).LoadTaskBlockingCriterias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RubricService_LoadTaskBlockingCriterias_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RubricServiceServer).LoadTaskBlockingCriterias(ctx, req.(*LoadTaskBlockingCriteriasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RubricService_LoadTaskMainCriterias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadTaskMainCriteriasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RubricServiceServer).LoadTaskMainCriterias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RubricService_LoadTaskMainCriterias_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RubricServiceServer).LoadTaskMainCriterias(ctx, req.(*LoadTaskMainCriteriasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RubricService_ServiceDesc is the grpc.ServiceDesc for RubricService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RubricService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rubric.RubricService",
	HandlerType: (*RubricServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNewBlockingCriteria",
			Handler:    _RubricService_CreateNewBlockingCriteria_Handler,
		},
		{
			MethodName: "CreateNewCriteriaGroup",
			Handler:    _RubricService_CreateNewCriteriaGroup_Handler,
		},
		{
			MethodName: "CreateNewMainCriteria",
			Handler:    _RubricService_CreateNewMainCriteria_Handler,
		},
		{
			MethodName: "CreateCriteriaDescription",
			Handler:    _RubricService_CreateCriteriaDescription_Handler,
		},
		{
			MethodName: "SetCriteriaWeight",
			Handler:    _RubricService_SetCriteriaWeight_Handler,
		},
		{
			MethodName: "LoadTaskBlockingCriterias",
			Handler:    _RubricService_LoadTaskBlockingCriterias_Handler,
		},
		{
			MethodName: "LoadTaskMainCriterias",
			Handler:    _RubricService_LoadTaskMainCriterias_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/rubric/rubric.proto",
}
