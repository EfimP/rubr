// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: proto/superacc/superacc.proto

package superacc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SuperAccService_UpdateUserRole_FullMethodName   = "/superacc.SuperAccService/UpdateUserRole"
	SuperAccService_ManageGroup_FullMethodName      = "/superacc.SuperAccService/ManageGroup"
	SuperAccService_ManageDiscipline_FullMethodName = "/superacc.SuperAccService/ManageDiscipline"
)

// SuperAccServiceClient is the client API for SuperAccService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SuperAccServiceClient interface {
	UpdateUserRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*UpdateRoleResponse, error)
	ManageGroup(ctx context.Context, in *ManageGroupRequest, opts ...grpc.CallOption) (*ManageGroupResponse, error)
	ManageDiscipline(ctx context.Context, in *ManageDisciplineRequest, opts ...grpc.CallOption) (*ManageDisciplineResponse, error)
}

type superAccServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSuperAccServiceClient(cc grpc.ClientConnInterface) SuperAccServiceClient {
	return &superAccServiceClient{cc}
}

func (c *superAccServiceClient) UpdateUserRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*UpdateRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRoleResponse)
	err := c.cc.Invoke(ctx, SuperAccService_UpdateUserRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superAccServiceClient) ManageGroup(ctx context.Context, in *ManageGroupRequest, opts ...grpc.CallOption) (*ManageGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ManageGroupResponse)
	err := c.cc.Invoke(ctx, SuperAccService_ManageGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superAccServiceClient) ManageDiscipline(ctx context.Context, in *ManageDisciplineRequest, opts ...grpc.CallOption) (*ManageDisciplineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ManageDisciplineResponse)
	err := c.cc.Invoke(ctx, SuperAccService_ManageDiscipline_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SuperAccServiceServer is the server API for SuperAccService service.
// All implementations must embed UnimplementedSuperAccServiceServer
// for forward compatibility.
type SuperAccServiceServer interface {
	UpdateUserRole(context.Context, *UpdateRoleRequest) (*UpdateRoleResponse, error)
	ManageGroup(context.Context, *ManageGroupRequest) (*ManageGroupResponse, error)
	ManageDiscipline(context.Context, *ManageDisciplineRequest) (*ManageDisciplineResponse, error)
	mustEmbedUnimplementedSuperAccServiceServer()
}

// UnimplementedSuperAccServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSuperAccServiceServer struct{}

func (UnimplementedSuperAccServiceServer) UpdateUserRole(context.Context, *UpdateRoleRequest) (*UpdateRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserRole not implemented")
}
func (UnimplementedSuperAccServiceServer) ManageGroup(context.Context, *ManageGroupRequest) (*ManageGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManageGroup not implemented")
}
func (UnimplementedSuperAccServiceServer) ManageDiscipline(context.Context, *ManageDisciplineRequest) (*ManageDisciplineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManageDiscipline not implemented")
}
func (UnimplementedSuperAccServiceServer) mustEmbedUnimplementedSuperAccServiceServer() {}
func (UnimplementedSuperAccServiceServer) testEmbeddedByValue()                         {}

// UnsafeSuperAccServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SuperAccServiceServer will
// result in compilation errors.
type UnsafeSuperAccServiceServer interface {
	mustEmbedUnimplementedSuperAccServiceServer()
}

func RegisterSuperAccServiceServer(s grpc.ServiceRegistrar, srv SuperAccServiceServer) {
	// If the following call pancis, it indicates UnimplementedSuperAccServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SuperAccService_ServiceDesc, srv)
}

func _SuperAccService_UpdateUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperAccServiceServer).UpdateUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperAccService_UpdateUserRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperAccServiceServer).UpdateUserRole(ctx, req.(*UpdateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperAccService_ManageGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperAccServiceServer).ManageGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperAccService_ManageGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperAccServiceServer).ManageGroup(ctx, req.(*ManageGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperAccService_ManageDiscipline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageDisciplineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperAccServiceServer).ManageDiscipline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperAccService_ManageDiscipline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperAccServiceServer).ManageDiscipline(ctx, req.(*ManageDisciplineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SuperAccService_ServiceDesc is the grpc.ServiceDesc for SuperAccService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SuperAccService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "superacc.SuperAccService",
	HandlerType: (*SuperAccServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateUserRole",
			Handler:    _SuperAccService_UpdateUserRole_Handler,
		},
		{
			MethodName: "ManageGroup",
			Handler:    _SuperAccService_ManageGroup_Handler,
		},
		{
			MethodName: "ManageDiscipline",
			Handler:    _SuperAccService_ManageDiscipline_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/superacc/superacc.proto",
}
