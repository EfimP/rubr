// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: proto/work/work.proto

package work

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WorkService_GetTasksForLector_FullMethodName            = "/work.WorkService/GetTasksForLector"
	WorkService_DeleteTask_FullMethodName                   = "/work.WorkService/DeleteTask"
	WorkService_SetTaskTitle_FullMethodName                 = "/work.WorkService/SetTaskTitle"
	WorkService_SetTaskDescription_FullMethodName           = "/work.WorkService/SetTaskDescription"
	WorkService_SetTaskDeadline_FullMethodName              = "/work.WorkService/SetTaskDeadline"
	WorkService_CreateWork_FullMethodName                   = "/work.WorkService/CreateWork"
	WorkService_LoadTaskName_FullMethodName                 = "/work.WorkService/LoadTaskName"
	WorkService_LoadTaskDescription_FullMethodName          = "/work.WorkService/LoadTaskDescription"
	WorkService_LoadTaskDeadline_FullMethodName             = "/work.WorkService/LoadTaskDeadline"
	WorkService_GetGroups_FullMethodName                    = "/work.WorkService/GetGroups"
	WorkService_GetDisciplines_FullMethodName               = "/work.WorkService/GetDisciplines"
	WorkService_GetTaskDetails_FullMethodName               = "/work.WorkService/GetTaskDetails"
	WorkService_UpdateTaskGroupAndDiscipline_FullMethodName = "/work.WorkService/UpdateTaskGroupAndDiscipline"
)

// WorkServiceClient is the client API for WorkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkServiceClient interface {
	GetTasksForLector(ctx context.Context, in *GetTasksForLectorRequest, opts ...grpc.CallOption) (*GetTasksForLectorResponse, error)
	DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*DeleteTaskResponse, error)
	SetTaskTitle(ctx context.Context, in *SetTaskTitleRequest, opts ...grpc.CallOption) (*SetTaskTitleResponse, error)
	SetTaskDescription(ctx context.Context, in *SetTaskDescriptionRequest, opts ...grpc.CallOption) (*SetTaskDescriptionResponse, error)
	SetTaskDeadline(ctx context.Context, in *SetTaskDeadlineRequest, opts ...grpc.CallOption) (*SetTaskDeadlineResponse, error)
	CreateWork(ctx context.Context, in *CreateWorkRequest, opts ...grpc.CallOption) (*CreateWorkResponse, error)
	LoadTaskName(ctx context.Context, in *LoadTaskNameRequest, opts ...grpc.CallOption) (*LoadTaskNameResponse, error)
	LoadTaskDescription(ctx context.Context, in *LoadTaskDescriptionRequest, opts ...grpc.CallOption) (*LoadTaskDescriptionResponse, error)
	LoadTaskDeadline(ctx context.Context, in *LoadTaskDeadlineRequest, opts ...grpc.CallOption) (*LoadTaskDeadlineResponse, error)
	GetGroups(ctx context.Context, in *GetGroupsRequest, opts ...grpc.CallOption) (*GetGroupsResponse, error)
	GetDisciplines(ctx context.Context, in *GetDisciplinesRequest, opts ...grpc.CallOption) (*GetDisciplinesResponse, error)
	GetTaskDetails(ctx context.Context, in *GetTaskDetailsRequest, opts ...grpc.CallOption) (*GetTaskDetailsResponse, error)
	UpdateTaskGroupAndDiscipline(ctx context.Context, in *UpdateTaskGroupAndDisciplineRequest, opts ...grpc.CallOption) (*UpdateTaskGroupAndDisciplineResponse, error)
}

type workServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkServiceClient(cc grpc.ClientConnInterface) WorkServiceClient {
	return &workServiceClient{cc}
}

func (c *workServiceClient) GetTasksForLector(ctx context.Context, in *GetTasksForLectorRequest, opts ...grpc.CallOption) (*GetTasksForLectorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTasksForLectorResponse)
	err := c.cc.Invoke(ctx, WorkService_GetTasksForLector_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workServiceClient) DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*DeleteTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTaskResponse)
	err := c.cc.Invoke(ctx, WorkService_DeleteTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workServiceClient) SetTaskTitle(ctx context.Context, in *SetTaskTitleRequest, opts ...grpc.CallOption) (*SetTaskTitleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetTaskTitleResponse)
	err := c.cc.Invoke(ctx, WorkService_SetTaskTitle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workServiceClient) SetTaskDescription(ctx context.Context, in *SetTaskDescriptionRequest, opts ...grpc.CallOption) (*SetTaskDescriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetTaskDescriptionResponse)
	err := c.cc.Invoke(ctx, WorkService_SetTaskDescription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workServiceClient) SetTaskDeadline(ctx context.Context, in *SetTaskDeadlineRequest, opts ...grpc.CallOption) (*SetTaskDeadlineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetTaskDeadlineResponse)
	err := c.cc.Invoke(ctx, WorkService_SetTaskDeadline_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workServiceClient) CreateWork(ctx context.Context, in *CreateWorkRequest, opts ...grpc.CallOption) (*CreateWorkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateWorkResponse)
	err := c.cc.Invoke(ctx, WorkService_CreateWork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workServiceClient) LoadTaskName(ctx context.Context, in *LoadTaskNameRequest, opts ...grpc.CallOption) (*LoadTaskNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoadTaskNameResponse)
	err := c.cc.Invoke(ctx, WorkService_LoadTaskName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workServiceClient) LoadTaskDescription(ctx context.Context, in *LoadTaskDescriptionRequest, opts ...grpc.CallOption) (*LoadTaskDescriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoadTaskDescriptionResponse)
	err := c.cc.Invoke(ctx, WorkService_LoadTaskDescription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workServiceClient) LoadTaskDeadline(ctx context.Context, in *LoadTaskDeadlineRequest, opts ...grpc.CallOption) (*LoadTaskDeadlineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoadTaskDeadlineResponse)
	err := c.cc.Invoke(ctx, WorkService_LoadTaskDeadline_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workServiceClient) GetGroups(ctx context.Context, in *GetGroupsRequest, opts ...grpc.CallOption) (*GetGroupsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGroupsResponse)
	err := c.cc.Invoke(ctx, WorkService_GetGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workServiceClient) GetDisciplines(ctx context.Context, in *GetDisciplinesRequest, opts ...grpc.CallOption) (*GetDisciplinesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDisciplinesResponse)
	err := c.cc.Invoke(ctx, WorkService_GetDisciplines_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workServiceClient) GetTaskDetails(ctx context.Context, in *GetTaskDetailsRequest, opts ...grpc.CallOption) (*GetTaskDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTaskDetailsResponse)
	err := c.cc.Invoke(ctx, WorkService_GetTaskDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workServiceClient) UpdateTaskGroupAndDiscipline(ctx context.Context, in *UpdateTaskGroupAndDisciplineRequest, opts ...grpc.CallOption) (*UpdateTaskGroupAndDisciplineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTaskGroupAndDisciplineResponse)
	err := c.cc.Invoke(ctx, WorkService_UpdateTaskGroupAndDiscipline_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkServiceServer is the server API for WorkService service.
// All implementations must embed UnimplementedWorkServiceServer
// for forward compatibility.
type WorkServiceServer interface {
	GetTasksForLector(context.Context, *GetTasksForLectorRequest) (*GetTasksForLectorResponse, error)
	DeleteTask(context.Context, *DeleteTaskRequest) (*DeleteTaskResponse, error)
	SetTaskTitle(context.Context, *SetTaskTitleRequest) (*SetTaskTitleResponse, error)
	SetTaskDescription(context.Context, *SetTaskDescriptionRequest) (*SetTaskDescriptionResponse, error)
	SetTaskDeadline(context.Context, *SetTaskDeadlineRequest) (*SetTaskDeadlineResponse, error)
	CreateWork(context.Context, *CreateWorkRequest) (*CreateWorkResponse, error)
	LoadTaskName(context.Context, *LoadTaskNameRequest) (*LoadTaskNameResponse, error)
	LoadTaskDescription(context.Context, *LoadTaskDescriptionRequest) (*LoadTaskDescriptionResponse, error)
	LoadTaskDeadline(context.Context, *LoadTaskDeadlineRequest) (*LoadTaskDeadlineResponse, error)
	GetGroups(context.Context, *GetGroupsRequest) (*GetGroupsResponse, error)
	GetDisciplines(context.Context, *GetDisciplinesRequest) (*GetDisciplinesResponse, error)
	GetTaskDetails(context.Context, *GetTaskDetailsRequest) (*GetTaskDetailsResponse, error)
	UpdateTaskGroupAndDiscipline(context.Context, *UpdateTaskGroupAndDisciplineRequest) (*UpdateTaskGroupAndDisciplineResponse, error)
	mustEmbedUnimplementedWorkServiceServer()
}

// UnimplementedWorkServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWorkServiceServer struct{}

func (UnimplementedWorkServiceServer) GetTasksForLector(context.Context, *GetTasksForLectorRequest) (*GetTasksForLectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTasksForLector not implemented")
}
func (UnimplementedWorkServiceServer) DeleteTask(context.Context, *DeleteTaskRequest) (*DeleteTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
}
func (UnimplementedWorkServiceServer) SetTaskTitle(context.Context, *SetTaskTitleRequest) (*SetTaskTitleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTaskTitle not implemented")
}
func (UnimplementedWorkServiceServer) SetTaskDescription(context.Context, *SetTaskDescriptionRequest) (*SetTaskDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTaskDescription not implemented")
}
func (UnimplementedWorkServiceServer) SetTaskDeadline(context.Context, *SetTaskDeadlineRequest) (*SetTaskDeadlineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTaskDeadline not implemented")
}
func (UnimplementedWorkServiceServer) CreateWork(context.Context, *CreateWorkRequest) (*CreateWorkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWork not implemented")
}
func (UnimplementedWorkServiceServer) LoadTaskName(context.Context, *LoadTaskNameRequest) (*LoadTaskNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadTaskName not implemented")
}
func (UnimplementedWorkServiceServer) LoadTaskDescription(context.Context, *LoadTaskDescriptionRequest) (*LoadTaskDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadTaskDescription not implemented")
}
func (UnimplementedWorkServiceServer) LoadTaskDeadline(context.Context, *LoadTaskDeadlineRequest) (*LoadTaskDeadlineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadTaskDeadline not implemented")
}
func (UnimplementedWorkServiceServer) GetGroups(context.Context, *GetGroupsRequest) (*GetGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroups not implemented")
}
func (UnimplementedWorkServiceServer) GetDisciplines(context.Context, *GetDisciplinesRequest) (*GetDisciplinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDisciplines not implemented")
}
func (UnimplementedWorkServiceServer) GetTaskDetails(context.Context, *GetTaskDetailsRequest) (*GetTaskDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskDetails not implemented")
}
func (UnimplementedWorkServiceServer) UpdateTaskGroupAndDiscipline(context.Context, *UpdateTaskGroupAndDisciplineRequest) (*UpdateTaskGroupAndDisciplineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTaskGroupAndDiscipline not implemented")
}
func (UnimplementedWorkServiceServer) mustEmbedUnimplementedWorkServiceServer() {}
func (UnimplementedWorkServiceServer) testEmbeddedByValue()                     {}

// UnsafeWorkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkServiceServer will
// result in compilation errors.
type UnsafeWorkServiceServer interface {
	mustEmbedUnimplementedWorkServiceServer()
}

func RegisterWorkServiceServer(s grpc.ServiceRegistrar, srv WorkServiceServer) {
	// If the following call pancis, it indicates UnimplementedWorkServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WorkService_ServiceDesc, srv)
}

func _WorkService_GetTasksForLector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTasksForLectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkServiceServer).GetTasksForLector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkService_GetTasksForLector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkServiceServer).GetTasksForLector(ctx, req.(*GetTasksForLectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkService_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkServiceServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkService_DeleteTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkServiceServer).DeleteTask(ctx, req.(*DeleteTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkService_SetTaskTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTaskTitleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkServiceServer).SetTaskTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkService_SetTaskTitle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkServiceServer).SetTaskTitle(ctx, req.(*SetTaskTitleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkService_SetTaskDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTaskDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkServiceServer).SetTaskDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkService_SetTaskDescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkServiceServer).SetTaskDescription(ctx, req.(*SetTaskDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkService_SetTaskDeadline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTaskDeadlineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkServiceServer).SetTaskDeadline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkService_SetTaskDeadline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkServiceServer).SetTaskDeadline(ctx, req.(*SetTaskDeadlineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkService_CreateWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkServiceServer).CreateWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkService_CreateWork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkServiceServer).CreateWork(ctx, req.(*CreateWorkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkService_LoadTaskName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadTaskNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkServiceServer).LoadTaskName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkService_LoadTaskName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkServiceServer).LoadTaskName(ctx, req.(*LoadTaskNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkService_LoadTaskDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadTaskDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkServiceServer).LoadTaskDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkService_LoadTaskDescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkServiceServer).LoadTaskDescription(ctx, req.(*LoadTaskDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkService_LoadTaskDeadline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadTaskDeadlineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkServiceServer).LoadTaskDeadline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkService_LoadTaskDeadline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkServiceServer).LoadTaskDeadline(ctx, req.(*LoadTaskDeadlineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkService_GetGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkServiceServer).GetGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkService_GetGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkServiceServer).GetGroups(ctx, req.(*GetGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkService_GetDisciplines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDisciplinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkServiceServer).GetDisciplines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkService_GetDisciplines_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkServiceServer).GetDisciplines(ctx, req.(*GetDisciplinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkService_GetTaskDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkServiceServer).GetTaskDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkService_GetTaskDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkServiceServer).GetTaskDetails(ctx, req.(*GetTaskDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkService_UpdateTaskGroupAndDiscipline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskGroupAndDisciplineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkServiceServer).UpdateTaskGroupAndDiscipline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkService_UpdateTaskGroupAndDiscipline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkServiceServer).UpdateTaskGroupAndDiscipline(ctx, req.(*UpdateTaskGroupAndDisciplineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkService_ServiceDesc is the grpc.ServiceDesc for WorkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "work.WorkService",
	HandlerType: (*WorkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTasksForLector",
			Handler:    _WorkService_GetTasksForLector_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _WorkService_DeleteTask_Handler,
		},
		{
			MethodName: "SetTaskTitle",
			Handler:    _WorkService_SetTaskTitle_Handler,
		},
		{
			MethodName: "SetTaskDescription",
			Handler:    _WorkService_SetTaskDescription_Handler,
		},
		{
			MethodName: "SetTaskDeadline",
			Handler:    _WorkService_SetTaskDeadline_Handler,
		},
		{
			MethodName: "CreateWork",
			Handler:    _WorkService_CreateWork_Handler,
		},
		{
			MethodName: "LoadTaskName",
			Handler:    _WorkService_LoadTaskName_Handler,
		},
		{
			MethodName: "LoadTaskDescription",
			Handler:    _WorkService_LoadTaskDescription_Handler,
		},
		{
			MethodName: "LoadTaskDeadline",
			Handler:    _WorkService_LoadTaskDeadline_Handler,
		},
		{
			MethodName: "GetGroups",
			Handler:    _WorkService_GetGroups_Handler,
		},
		{
			MethodName: "GetDisciplines",
			Handler:    _WorkService_GetDisciplines_Handler,
		},
		{
			MethodName: "GetTaskDetails",
			Handler:    _WorkService_GetTaskDetails_Handler,
		},
		{
			MethodName: "UpdateTaskGroupAndDiscipline",
			Handler:    _WorkService_UpdateTaskGroupAndDiscipline_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/work/work.proto",
}
